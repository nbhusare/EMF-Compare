/*
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package org.neclipse.xtext.smalljavadsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SmallJavaDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class NamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.neclipse.xtext.smalljavadsl.SmallJavaDsl.Namespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportDeclarationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportDeclarationImportDeclarationParserRuleCall_2_0 = (RuleCall)cImportDeclarationAssignment_2.eContents().get(0);
		private final Assignment cSmallClazzAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSmallClazzSmallClazzParserRuleCall_3_0 = (RuleCall)cSmallClazzAssignment_3.eContents().get(0);
		
		//Namespace:
		//	'namespace' name=QualifedName
		//	importDeclaration=ImportDeclaration
		//	smallClazz=SmallClazz;
		@Override public ParserRule getRule() { return rule; }
		
		//'namespace' name=QualifedName importDeclaration=ImportDeclaration smallClazz=SmallClazz
		public Group getGroup() { return cGroup; }
		
		//'namespace'
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }
		
		//name=QualifedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifedName
		public RuleCall getNameQualifedNameParserRuleCall_1_0() { return cNameQualifedNameParserRuleCall_1_0; }
		
		//importDeclaration=ImportDeclaration
		public Assignment getImportDeclarationAssignment_2() { return cImportDeclarationAssignment_2; }
		
		//ImportDeclaration
		public RuleCall getImportDeclarationImportDeclarationParserRuleCall_2_0() { return cImportDeclarationImportDeclarationParserRuleCall_2_0; }
		
		//smallClazz=SmallClazz
		public Assignment getSmallClazzAssignment_3() { return cSmallClazzAssignment_3; }
		
		//SmallClazz
		public RuleCall getSmallClazzSmallClazzParserRuleCall_3_0() { return cSmallClazzSmallClazzParserRuleCall_3_0; }
	}
	public class ImportDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.neclipse.xtext.smalljavadsl.SmallJavaDsl.ImportDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImportDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		
		//ImportDeclaration:
		//	{ImportDeclaration} imports+=Import*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ImportDeclaration} imports+=Import*
		public Group getGroup() { return cGroup; }
		
		//{ImportDeclaration}
		public Action getImportDeclarationAction_0() { return cImportDeclarationAction_0; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.neclipse.xtext.smalljavadsl.SmallJavaDsl.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' importedNamespace=QualifedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifedNameWithWildcard
		public RuleCall getImportedNamespaceQualifedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifedNameWithWildcardParserRuleCall_1_0; }
	}
	public class QualifedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.neclipse.xtext.smalljavadsl.SmallJavaDsl.QualifedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.neclipse.xtext.smalljavadsl.SmallJavaDsl.QualifedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifedNameWithWildcard:
		//	QualifedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifedName
		public RuleCall getQualifedNameParserRuleCall_0() { return cQualifedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class SmallClazzElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.neclipse.xtext.smalljavadsl.SmallJavaDsl.SmallClazz");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Keyword cClazzKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperClassAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperClassSmallClazzCrossReference_3_1_0 = (CrossReference)cSuperClassAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperClassSmallClazzIDTerminalRuleCall_3_1_0_1 = (RuleCall)cSuperClassSmallClazzCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAttributesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttributesAttributeParserRuleCall_5_0 = (RuleCall)cAttributesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SmallClazz:
		//	visibility=Visibility 'clazz' name=ID ('extends' superClass=[SmallClazz])? '{'
		//	attributes+=Attribute*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=Visibility 'clazz' name=ID ('extends' superClass=[SmallClazz])? '{' attributes+=Attribute* '}'
		public Group getGroup() { return cGroup; }
		
		//visibility=Visibility
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }
		
		//'clazz'
		public Keyword getClazzKeyword_1() { return cClazzKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('extends' superClass=[SmallClazz])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//superClass=[SmallClazz]
		public Assignment getSuperClassAssignment_3_1() { return cSuperClassAssignment_3_1; }
		
		//[SmallClazz]
		public CrossReference getSuperClassSmallClazzCrossReference_3_1_0() { return cSuperClassSmallClazzCrossReference_3_1_0; }
		
		//ID
		public RuleCall getSuperClassSmallClazzIDTerminalRuleCall_3_1_0_1() { return cSuperClassSmallClazzIDTerminalRuleCall_3_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_5() { return cAttributesAssignment_5; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_5_0() { return cAttributesAttributeParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.neclipse.xtext.smalljavadsl.SmallJavaDsl.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDatatypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDatatypeDataTypeParserRuleCall_0_0 = (RuleCall)cDatatypeAssignment_0.eContents().get(0);
		private final Assignment cArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cArrayLeftSquareBracketRightSquareBracketKeyword_1_0 = (Keyword)cArrayAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Attribute:
		//	datatype=DataType array?='[]'? name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//datatype=DataType array?='[]'? name=ID
		public Group getGroup() { return cGroup; }
		
		//datatype=DataType
		public Assignment getDatatypeAssignment_0() { return cDatatypeAssignment_0; }
		
		//DataType
		public RuleCall getDatatypeDataTypeParserRuleCall_0_0() { return cDatatypeDataTypeParserRuleCall_0_0; }
		
		//array?='[]'?
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }
		
		//'[]'
		public Keyword getArrayLeftSquareBracketRightSquareBracketKeyword_1_0() { return cArrayLeftSquareBracketRightSquareBracketKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.neclipse.xtext.smalljavadsl.SmallJavaDsl.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DataType:
		//	BasicType | ClassType;
		@Override public ParserRule getRule() { return rule; }
		
		//BasicType | ClassType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BasicType
		public RuleCall getBasicTypeParserRuleCall_0() { return cBasicTypeParserRuleCall_0; }
		
		//ClassType
		public RuleCall getClassTypeParserRuleCall_1() { return cClassTypeParserRuleCall_1; }
	}
	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.neclipse.xtext.smalljavadsl.SmallJavaDsl.BasicType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLongTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDoubleTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//BasicType:
		//	StringType | BooleanType | IntegerType | LongType | DoubleType;
		@Override public ParserRule getRule() { return rule; }
		
		//StringType | BooleanType | IntegerType | LongType | DoubleType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringType
		public RuleCall getStringTypeParserRuleCall_0() { return cStringTypeParserRuleCall_0; }
		
		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_1() { return cBooleanTypeParserRuleCall_1; }
		
		//IntegerType
		public RuleCall getIntegerTypeParserRuleCall_2() { return cIntegerTypeParserRuleCall_2; }
		
		//LongType
		public RuleCall getLongTypeParserRuleCall_3() { return cLongTypeParserRuleCall_3; }
		
		//DoubleType
		public RuleCall getDoubleTypeParserRuleCall_4() { return cDoubleTypeParserRuleCall_4; }
	}
	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.neclipse.xtext.smalljavadsl.SmallJavaDsl.StringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StringType:
		//	{StringType}
		//	'String';
		@Override public ParserRule getRule() { return rule; }
		
		//{StringType} 'String'
		public Group getGroup() { return cGroup; }
		
		//{StringType}
		public Action getStringTypeAction_0() { return cStringTypeAction_0; }
		
		//'String'
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
	}
	public class BooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.neclipse.xtext.smalljavadsl.SmallJavaDsl.BooleanType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBooleanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BooleanType:
		//	{BooleanType}
		//	'Boolean';
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanType} 'Boolean'
		public Group getGroup() { return cGroup; }
		
		//{BooleanType}
		public Action getBooleanTypeAction_0() { return cBooleanTypeAction_0; }
		
		//'Boolean'
		public Keyword getBooleanKeyword_1() { return cBooleanKeyword_1; }
	}
	public class IntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.neclipse.xtext.smalljavadsl.SmallJavaDsl.IntegerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntegerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IntegerType:
		//	{IntegerType}
		//	'Integer';
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerType} 'Integer'
		public Group getGroup() { return cGroup; }
		
		//{IntegerType}
		public Action getIntegerTypeAction_0() { return cIntegerTypeAction_0; }
		
		//'Integer'
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }
	}
	public class LongTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.neclipse.xtext.smalljavadsl.SmallJavaDsl.LongType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLongTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLongKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LongType:
		//	{LongType}
		//	'Long';
		@Override public ParserRule getRule() { return rule; }
		
		//{LongType} 'Long'
		public Group getGroup() { return cGroup; }
		
		//{LongType}
		public Action getLongTypeAction_0() { return cLongTypeAction_0; }
		
		//'Long'
		public Keyword getLongKeyword_1() { return cLongKeyword_1; }
	}
	public class DoubleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.neclipse.xtext.smalljavadsl.SmallJavaDsl.DoubleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDoubleTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDoubleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DoubleType:
		//	{DoubleType}
		//	'Double';
		@Override public ParserRule getRule() { return rule; }
		
		//{DoubleType} 'Double'
		public Group getGroup() { return cGroup; }
		
		//{DoubleType}
		public Action getDoubleTypeAction_0() { return cDoubleTypeAction_0; }
		
		//'Double'
		public Keyword getDoubleKeyword_1() { return cDoubleKeyword_1; }
	}
	public class ClassTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.neclipse.xtext.smalljavadsl.SmallJavaDsl.ClassType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeSmallClazzCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeSmallClazzIDTerminalRuleCall_0_1 = (RuleCall)cTypeSmallClazzCrossReference_0.eContents().get(1);
		
		//ClassType:
		//	type=[SmallClazz];
		@Override public ParserRule getRule() { return rule; }
		
		//type=[SmallClazz]
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//[SmallClazz]
		public CrossReference getTypeSmallClazzCrossReference_0() { return cTypeSmallClazzCrossReference_0; }
		
		//ID
		public RuleCall getTypeSmallClazzIDTerminalRuleCall_0_1() { return cTypeSmallClazzIDTerminalRuleCall_0_1; }
	}
	
	public class VisibilityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.neclipse.xtext.smalljavadsl.SmallJavaDsl.Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUBLICPublicKeyword_0_0 = (Keyword)cPUBLICEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPRIVATEPrivateKeyword_1_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Visibility:
		//	PUBLIC='public' | PRIVATE='private';
		public EnumRule getRule() { return rule; }
		
		//PUBLIC='public' | PRIVATE='private'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PUBLIC='public'
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_0() { return cPUBLICEnumLiteralDeclaration_0; }
		
		//'public'
		public Keyword getPUBLICPublicKeyword_0_0() { return cPUBLICPublicKeyword_0_0; }
		
		//PRIVATE='private'
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_1() { return cPRIVATEEnumLiteralDeclaration_1; }
		
		//'private'
		public Keyword getPRIVATEPrivateKeyword_1_0() { return cPRIVATEPrivateKeyword_1_0; }
	}
	
	private final NamespaceElements pNamespace;
	private final ImportDeclarationElements pImportDeclaration;
	private final ImportElements pImport;
	private final QualifedNameElements pQualifedName;
	private final QualifedNameWithWildcardElements pQualifedNameWithWildcard;
	private final SmallClazzElements pSmallClazz;
	private final VisibilityElements eVisibility;
	private final AttributeElements pAttribute;
	private final DataTypeElements pDataType;
	private final BasicTypeElements pBasicType;
	private final StringTypeElements pStringType;
	private final BooleanTypeElements pBooleanType;
	private final IntegerTypeElements pIntegerType;
	private final LongTypeElements pLongType;
	private final DoubleTypeElements pDoubleType;
	private final ClassTypeElements pClassType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SmallJavaDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pNamespace = new NamespaceElements();
		this.pImportDeclaration = new ImportDeclarationElements();
		this.pImport = new ImportElements();
		this.pQualifedName = new QualifedNameElements();
		this.pQualifedNameWithWildcard = new QualifedNameWithWildcardElements();
		this.pSmallClazz = new SmallClazzElements();
		this.eVisibility = new VisibilityElements();
		this.pAttribute = new AttributeElements();
		this.pDataType = new DataTypeElements();
		this.pBasicType = new BasicTypeElements();
		this.pStringType = new StringTypeElements();
		this.pBooleanType = new BooleanTypeElements();
		this.pIntegerType = new IntegerTypeElements();
		this.pLongType = new LongTypeElements();
		this.pDoubleType = new DoubleTypeElements();
		this.pClassType = new ClassTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.neclipse.xtext.smalljavadsl.SmallJavaDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Namespace:
	//	'namespace' name=QualifedName
	//	importDeclaration=ImportDeclaration
	//	smallClazz=SmallClazz;
	public NamespaceElements getNamespaceAccess() {
		return pNamespace;
	}
	
	public ParserRule getNamespaceRule() {
		return getNamespaceAccess().getRule();
	}
	
	//ImportDeclaration:
	//	{ImportDeclaration} imports+=Import*;
	public ImportDeclarationElements getImportDeclarationAccess() {
		return pImportDeclaration;
	}
	
	public ParserRule getImportDeclarationRule() {
		return getImportDeclarationAccess().getRule();
	}
	
	//Import:
	//	'import' importedNamespace=QualifedNameWithWildcard;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//QualifedName:
	//	ID ('.' ID)*;
	public QualifedNameElements getQualifedNameAccess() {
		return pQualifedName;
	}
	
	public ParserRule getQualifedNameRule() {
		return getQualifedNameAccess().getRule();
	}
	
	//QualifedNameWithWildcard:
	//	QualifedName '.*'?;
	public QualifedNameWithWildcardElements getQualifedNameWithWildcardAccess() {
		return pQualifedNameWithWildcard;
	}
	
	public ParserRule getQualifedNameWithWildcardRule() {
		return getQualifedNameWithWildcardAccess().getRule();
	}
	
	//SmallClazz:
	//	visibility=Visibility 'clazz' name=ID ('extends' superClass=[SmallClazz])? '{'
	//	attributes+=Attribute*
	//	'}';
	public SmallClazzElements getSmallClazzAccess() {
		return pSmallClazz;
	}
	
	public ParserRule getSmallClazzRule() {
		return getSmallClazzAccess().getRule();
	}
	
	//enum Visibility:
	//	PUBLIC='public' | PRIVATE='private';
	public VisibilityElements getVisibilityAccess() {
		return eVisibility;
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}
	
	//Attribute:
	//	datatype=DataType array?='[]'? name=ID;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//DataType:
	//	BasicType | ClassType;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//BasicType:
	//	StringType | BooleanType | IntegerType | LongType | DoubleType;
	public BasicTypeElements getBasicTypeAccess() {
		return pBasicType;
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}
	
	//StringType:
	//	{StringType}
	//	'String';
	public StringTypeElements getStringTypeAccess() {
		return pStringType;
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}
	
	//BooleanType:
	//	{BooleanType}
	//	'Boolean';
	public BooleanTypeElements getBooleanTypeAccess() {
		return pBooleanType;
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}
	
	//IntegerType:
	//	{IntegerType}
	//	'Integer';
	public IntegerTypeElements getIntegerTypeAccess() {
		return pIntegerType;
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}
	
	//LongType:
	//	{LongType}
	//	'Long';
	public LongTypeElements getLongTypeAccess() {
		return pLongType;
	}
	
	public ParserRule getLongTypeRule() {
		return getLongTypeAccess().getRule();
	}
	
	//DoubleType:
	//	{DoubleType}
	//	'Double';
	public DoubleTypeElements getDoubleTypeAccess() {
		return pDoubleType;
	}
	
	public ParserRule getDoubleTypeRule() {
		return getDoubleTypeAccess().getRule();
	}
	
	//ClassType:
	//	type=[SmallClazz];
	public ClassTypeElements getClassTypeAccess() {
		return pClassType;
	}
	
	public ParserRule getClassTypeRule() {
		return getClassTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
