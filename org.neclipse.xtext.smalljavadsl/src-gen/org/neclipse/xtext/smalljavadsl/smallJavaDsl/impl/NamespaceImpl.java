/**
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package org.neclipse.xtext.smalljavadsl.smallJavaDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.neclipse.xtext.smalljavadsl.smallJavaDsl.ImportDeclaration;
import org.neclipse.xtext.smalljavadsl.smallJavaDsl.Namespace;
import org.neclipse.xtext.smalljavadsl.smallJavaDsl.SmallClazz;
import org.neclipse.xtext.smalljavadsl.smallJavaDsl.SmallJavaDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Namespace</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.neclipse.xtext.smalljavadsl.smallJavaDsl.impl.NamespaceImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.neclipse.xtext.smalljavadsl.smallJavaDsl.impl.NamespaceImpl#getImportDeclaration <em>Import Declaration</em>}</li>
 *   <li>{@link org.neclipse.xtext.smalljavadsl.smallJavaDsl.impl.NamespaceImpl#getSmallClazz <em>Small Clazz</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NamespaceImpl extends MinimalEObjectImpl.Container implements Namespace
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getImportDeclaration() <em>Import Declaration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImportDeclaration()
   * @generated
   * @ordered
   */
  protected ImportDeclaration importDeclaration;

  /**
   * The cached value of the '{@link #getSmallClazz() <em>Small Clazz</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSmallClazz()
   * @generated
   * @ordered
   */
  protected SmallClazz smallClazz;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NamespaceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SmallJavaDslPackage.Literals.NAMESPACE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmallJavaDslPackage.NAMESPACE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImportDeclaration getImportDeclaration()
  {
    return importDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetImportDeclaration(ImportDeclaration newImportDeclaration, NotificationChain msgs)
  {
    ImportDeclaration oldImportDeclaration = importDeclaration;
    importDeclaration = newImportDeclaration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SmallJavaDslPackage.NAMESPACE__IMPORT_DECLARATION, oldImportDeclaration, newImportDeclaration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setImportDeclaration(ImportDeclaration newImportDeclaration)
  {
    if (newImportDeclaration != importDeclaration)
    {
      NotificationChain msgs = null;
      if (importDeclaration != null)
        msgs = ((InternalEObject)importDeclaration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SmallJavaDslPackage.NAMESPACE__IMPORT_DECLARATION, null, msgs);
      if (newImportDeclaration != null)
        msgs = ((InternalEObject)newImportDeclaration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SmallJavaDslPackage.NAMESPACE__IMPORT_DECLARATION, null, msgs);
      msgs = basicSetImportDeclaration(newImportDeclaration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmallJavaDslPackage.NAMESPACE__IMPORT_DECLARATION, newImportDeclaration, newImportDeclaration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SmallClazz getSmallClazz()
  {
    return smallClazz;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSmallClazz(SmallClazz newSmallClazz, NotificationChain msgs)
  {
    SmallClazz oldSmallClazz = smallClazz;
    smallClazz = newSmallClazz;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SmallJavaDslPackage.NAMESPACE__SMALL_CLAZZ, oldSmallClazz, newSmallClazz);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSmallClazz(SmallClazz newSmallClazz)
  {
    if (newSmallClazz != smallClazz)
    {
      NotificationChain msgs = null;
      if (smallClazz != null)
        msgs = ((InternalEObject)smallClazz).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SmallJavaDslPackage.NAMESPACE__SMALL_CLAZZ, null, msgs);
      if (newSmallClazz != null)
        msgs = ((InternalEObject)newSmallClazz).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SmallJavaDslPackage.NAMESPACE__SMALL_CLAZZ, null, msgs);
      msgs = basicSetSmallClazz(newSmallClazz, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmallJavaDslPackage.NAMESPACE__SMALL_CLAZZ, newSmallClazz, newSmallClazz));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SmallJavaDslPackage.NAMESPACE__IMPORT_DECLARATION:
        return basicSetImportDeclaration(null, msgs);
      case SmallJavaDslPackage.NAMESPACE__SMALL_CLAZZ:
        return basicSetSmallClazz(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SmallJavaDslPackage.NAMESPACE__NAME:
        return getName();
      case SmallJavaDslPackage.NAMESPACE__IMPORT_DECLARATION:
        return getImportDeclaration();
      case SmallJavaDslPackage.NAMESPACE__SMALL_CLAZZ:
        return getSmallClazz();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SmallJavaDslPackage.NAMESPACE__NAME:
        setName((String)newValue);
        return;
      case SmallJavaDslPackage.NAMESPACE__IMPORT_DECLARATION:
        setImportDeclaration((ImportDeclaration)newValue);
        return;
      case SmallJavaDslPackage.NAMESPACE__SMALL_CLAZZ:
        setSmallClazz((SmallClazz)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SmallJavaDslPackage.NAMESPACE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case SmallJavaDslPackage.NAMESPACE__IMPORT_DECLARATION:
        setImportDeclaration((ImportDeclaration)null);
        return;
      case SmallJavaDslPackage.NAMESPACE__SMALL_CLAZZ:
        setSmallClazz((SmallClazz)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SmallJavaDslPackage.NAMESPACE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case SmallJavaDslPackage.NAMESPACE__IMPORT_DECLARATION:
        return importDeclaration != null;
      case SmallJavaDslPackage.NAMESPACE__SMALL_CLAZZ:
        return smallClazz != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //NamespaceImpl
